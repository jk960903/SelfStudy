package gualho;

/*1. 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다. 
2. 문자열 w를 두 "균형잡힌 괄호 문자열" u, v로 분리합니다. 단, u는 "균형잡힌 괄호 문자열"로 더 이상 분리할 수 없어야 하며, v는 빈 문자열이 될 수 있습니다. 
3. 문자열 u가 "올바른 괄호 문자열" 이라면 문자열 v에 대해 1단계부터 다시 수행합니다. 
  3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다. 
4. 문자열 u가 "올바른 괄호 문자열"이 아니라면 아래 과정을 수행합니다. 
  4-1. 빈 문자열에 첫 번째 문자로 '('를 붙입니다. 
  4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다. 
  4-3. ')'를 다시 붙입니다. 
  4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다. 
  4-5. 생성된 문자열을 반환합니다.*/
public class Solution {
	public static void main(String[] args) {
		System.out.print(solution("()))((()"));
		
	}
	public static String solution(String p) {
        String answer = "";
        if(balance(p)) return p;
        else return Convert(p);

    }
	public static boolean balance(String p) {
		char[] temp=p.toCharArray();
		int tempindex=0;
		for(int i=0; i<temp.length; i++) {
			if(tempindex<0) return false;
			if(temp[i]=='(') tempindex++;
			else if(temp[i]==')') tempindex--;
		}
		return true;
	}
	public static String Convert(String p) {
		if(p.equals("")) return "";
		String u=FindComplete(p);
		String v=p.substring(u.length());
		StringBuilder sb=new StringBuilder();
		if(balance(u)) {//v에대해 다시 1단계부터 실행
			sb.append(u);
			sb.append(Convert(v));
			return sb.toString();
		}
		else {
			sb.append('(');
			sb.append(Convert(v));
			sb.append(')');
			sb.append(RemoveAndReverse(u));
			return sb.toString();
		}
		
	}
	public static String FindComplete(String p) {
		StringBuilder sb=new StringBuilder();
		int tempindex=0;
		for(int i=0; i<p.length(); i++) {
			char temp=p.charAt(i);
			if(temp=='(') tempindex++;
			else tempindex--;
			sb.append(temp);
			if(i>=1 && tempindex==0) return sb.toString();
		}
		return sb.toString();
	}
	public static String RemoveAndReverse(String p) {
		StringBuilder sb=new StringBuilder();
		String cut=p.substring(1,p.length()-1);
		for(int i=0; i<cut.length(); i++) {
			char temp=cut.charAt(i);
			if(temp=='(') sb.append(')');
			else sb.append('(');
		}
		return sb.toString();
	}
	
}
